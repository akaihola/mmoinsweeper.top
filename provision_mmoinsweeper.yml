---

# Make sure the `ansible` user has been created
# by running the `first_run.yml` playbook once.
#
# Run this playbook with the following command:
# ansible-playbook -i inventory.yml provision_mmoinsweeper.yml --ask-vault-pass

- name: Provision MMOInsweeper Server
  hosts: all
  become: yes
  vars_files:
    - vault.yml
  vars:
    #ansible_ssh_private_key_file: "~/.ssh/id_ed25519"
    branch: ""
    domain_name: "mmoinsweeper.top"
    subdomain: "{{ branch }}{{ '' if branch == '' else '.' }}mmoinsweeper.top"
    service_name: "mmoinsweeper{{ '' if branch == '' else '-' }}{{ branch }}"
    gh_repo: "https://github.com/akaihola/mmoinsweeper"
    release_static_content_path: "/releases/latest/download/mmoinsweeper-static-content.zip"  # only `public/`
    pr_static_content_path: "/archive/refs/heads/{{ branch }}.zip"  # full repo archive
    static_content_url: "{{ gh_repo }}/{{ release_static_content_path if branch == '' else pr_static_content_path }}"

  tasks:
    - name: Install unzip, Nginx and Nginx certbot plugin
      apt:
        name:
          - certbot
          - nginx
          - python3-certbot-nginx
          - unzip
        state: present
        update_cache: yes

    - name: Create mmoinsweeper user
      user:
        name: mmoinsweeper
        state: present
        groups: sudo
        shell: /bin/bash

    - name: Set up authorized keys for mmoinsweeper user
      # The private key should be copied to GitHub secrets so branch deployments can be uploaded to the server
      authorized_key:
        user: mmoinsweeper
        state: present
        key: "{{ lookup('file', '~/.ssh/id_mmoinsweeper.pub') }}"

    - name: Create Certbot webroot directory
      file:
        path: /var/www/certbot
        state: directory
        mode: '0755'

    - name: Add DNS A record for subdomain
      tags: pr
      when: branch != ""
      community.general.gandi_livedns:
        personal_access_token: "{{ gandi_token }}"
        domain: "{{ domain_name }}"
        record: "{{ branch }}"
        type: "A"
        ttl: 300
        values:
          - "{{ ansible_host }}"
        state: present

    - name: Configure Nginx for HTTP
      tags: [ pr, certbot ]
      template:
        src: nginx_http.conf.j2
        dest: /etc/nginx/sites-available/{{ subdomain }}
      notify: Reload Nginx

    - name: Enable Nginx site
      tags: [ pr, certbot ]
      file:
        src: /etc/nginx/sites-available/{{ subdomain }}
        dest: /etc/nginx/sites-enabled/{{ subdomain }}
        state: link
      notify: Reload Nginx

    - name: Reload Nginx to apply HTTP configuration
      tags: [ pr, certbot ]
      meta: flush_handlers

    - name: Obtain SSL certificate
      tags: [ pr, certbot ]
      command: certbot certonly --webroot -w /var/www/certbot -d {{ subdomain }} --non-interactive --agree-tos --email {{ certbot_email }}
      args:
        creates: /etc/letsencrypt/live/{{ subdomain }}/fullchain.pem

    - name: Configure Nginx for HTTPS
      tags: [ pr, certbot, nginx ]
      template:
        src: nginx_https.conf.j2
        dest: /etc/nginx/sites-available/{{ subdomain }}
      notify: Reload Nginx

    - name: Create directory for mmoinsweeper static content
      tags: pr
      file:
        path: "/var/www/{{ service_name }}"  # /var/www/mmoinsweeper or /var/www/mmoinsweeper-<branch>
        state: directory
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Download and extract mmoinsweeper static content
      tags: [ pr, release ]
      ansible.builtin.unarchive:
        src: "{{ static_content_url }}"  # a release zip or a repo zip archive for a branch
        dest: "/var/www"
        include: "{{ service_name }}/public/*"  # binary is obtained separately
        remote_src: yes
        owner: www-data
        group: www-data
        mode: '0755'

    - name: Download latest mmoinsweeper binary
      tags: release
      when: branch == ""  # it's a release, download the binary relased by the GitHub workflow
      get_url:
        url: "{{ gh_repo }}/releases/latest/download/mmoinsweeper"
        dest: /usr/local/bin/{{ service_name }}  # /usr/local/bin/mmoinsweeper
        mode: '0755'
        owner: root
        group: root

    - name: Copy mmoinsweeper branch binary uploaded by GitHub workflow
      tags: pr
      when: branch != ""  # it's a branch deployment, copy the binary uploaded by the GitHub workflow
      copy:
        src: /home/mmoinsweeper/{{ service_name }}  # /home/mmoinsweeper/mmoinsweeper-<branch>
        remote_src: yes
        dest: /usr/local/bin/{{ service_name }}  # /usr/local/bin/mmoinsweeper-<branch>
        mode: '0755'
        owner: root
        group: root

    - name: Create systemd service file
      tags: pr
      template:
        src: "mmoinsweeper.service.j2"
        dest: /etc/systemd/system/{{ service_name }}.service
      notify: Reload systemd

    - name: Start and enable mmoinsweeper service
      tags: [ pr, release ]
      systemd:
        name: "{{ service_name }}"
        state: restarted
        enabled: yes

  handlers:
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Restart SSH
      service:
        name: ssh
        state: restarted
